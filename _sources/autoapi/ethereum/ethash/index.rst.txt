:mod:`ethereum.ethash`
======================

.. py:module:: ethereum.ethash

Ethash Functions
^^^^^^^^^^^^^^^^

..contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Ethash algorithm related functionalities.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.ethash.epoch
   ethereum.ethash.cache_size
   ethereum.ethash.dataset_size
   ethereum.ethash.generate_seed
   ethereum.ethash.generate_cache
   ethereum.ethash.fnv
   ethereum.ethash.fnv_hash
   ethereum.ethash.generate_dataset_item
   ethereum.ethash.generate_dataset



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.ethash.EPOCH_SIZE
   ethereum.ethash.INITIAL_CACHE_SIZE
   ethereum.ethash.CACHE_EPOCH_GROWTH_SIZE
   ethereum.ethash.INITIAL_DATASET_SIZE
   ethereum.ethash.DATASET_EPOCH_GROWTH_SIZE
   ethereum.ethash.HASH_BYTES
   ethereum.ethash.MIX_BYTES
   ethereum.ethash.CACHE_ROUNDS
   ethereum.ethash.DATASET_PARENTS


Module Details
---------------

EPOCH_SIZE
~~~~~~~~~~

.. py:data:: EPOCH_SIZE
   :annotation: = 30000

   


INITIAL_CACHE_SIZE
~~~~~~~~~~~~~~~~~~

.. py:data:: INITIAL_CACHE_SIZE
   

   


CACHE_EPOCH_GROWTH_SIZE
~~~~~~~~~~~~~~~~~~~~~~~

.. py:data:: CACHE_EPOCH_GROWTH_SIZE
   

   


INITIAL_DATASET_SIZE
~~~~~~~~~~~~~~~~~~~~

.. py:data:: INITIAL_DATASET_SIZE
   

   


DATASET_EPOCH_GROWTH_SIZE
~~~~~~~~~~~~~~~~~~~~~~~~~

.. py:data:: DATASET_EPOCH_GROWTH_SIZE
   

   


HASH_BYTES
~~~~~~~~~~

.. py:data:: HASH_BYTES
   :annotation: = 64

   


MIX_BYTES
~~~~~~~~~

.. py:data:: MIX_BYTES
   :annotation: = 128

   


CACHE_ROUNDS
~~~~~~~~~~~~

.. py:data:: CACHE_ROUNDS
   :annotation: = 3

   


DATASET_PARENTS
~~~~~~~~~~~~~~~

.. py:data:: DATASET_PARENTS
   :annotation: = 256

   


epoch
~~~~~


.. function:: epoch(block_number: ethereum.base_types.Uint) -> ethereum.base_types.Uint
   :noindexentry:

   Obtain the epoch number to which the block identified by `block_number`
   belongs.

   :param block_number: The number of the block of interest.

   :returns: **epoch_number** -- The epoch number to which the passed in block belongs.
   :rtype: `Uint`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 37-52

cache_size
~~~~~~~~~~


.. function:: cache_size(block_number: ethereum.base_types.Uint) -> ethereum.base_types.Uint
   :noindexentry:

   Obtain the cache size (in bytes) of the epoch to which `block_number`
   belongs.

   :param block_number: The number of the block of interest.

   :returns: **cache_size_bytes** -- The cache size in bytes for the passed in block.
   :rtype: `Uint`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 55-75

dataset_size
~~~~~~~~~~~~


.. function:: dataset_size(block_number: ethereum.base_types.Uint) -> ethereum.base_types.Uint
   :noindexentry:

   Obtain the dataset size (in bytes) of the epoch to which `block_number`
   belongs.

   :param block_number: The number of the block of interest.

   :returns: **dataset_size_bytes** -- The dataset size in bytes for the passed in block.
   :rtype: `Uint`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 78-100

generate_seed
~~~~~~~~~~~~~


.. function:: generate_seed(block_number: ethereum.base_types.Uint) -> ethereum.crypto.Hash32
   :noindexentry:

   Obtain the cache generation seed for the block identified by
   `block_number`.

   :param block_number: The number of the block of interest.

   :returns: **seed** -- The cache generation seed for the passed in block.
   :rtype: `Hash32`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 103-125

generate_cache
~~~~~~~~~~~~~~


.. function:: generate_cache(block_number: ethereum.base_types.Uint) -> Tuple[Tuple[ethereum.base_types.Uint32, Ellipsis], Ellipsis]
   :noindexentry:

   Generate the cache for the block identified by `block_number`. This cache
   would later be used to generate the full dataset.

   :param block_number: The number of the block of interest.

   :returns: **cache** -- The cache generated for the passed in block.
   :rtype: `Tuple[Tuple[Uint32, ...], ...]`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 128-171

fnv
~~~


.. function:: fnv(a: Union[ethereum.base_types.Uint, ethereum.base_types.Uint32], b: Union[ethereum.base_types.Uint, ethereum.base_types.Uint32]) -> ethereum.base_types.Uint32
   :noindexentry:

   FNV algorithm is inspired by the FNV hash, which in some cases is used
   as a non-associative substitute for XOR.

   Note that here we multiply the prime with the full 32-bit input, in
   contrast with the FNV-1 spec which multiplies the prime with
   one byte (octet) in turn.

   :param a: The first data point.
   :param b: The second data point.

   :returns: **modified_mix_integers** -- The result of performing fnv on the passed in data points.
   :rtype: `Uint32`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 175-198

fnv_hash
~~~~~~~~


.. function:: fnv_hash(mix_integers: Tuple[ethereum.base_types.Uint32, Ellipsis], data: Tuple[ethereum.base_types.Uint32, Ellipsis]) -> Tuple[ethereum.base_types.Uint32, Ellipsis]
   :noindexentry:

   FNV Hash mixes in data into mix using the ethash fnv method.

   :param mix_integers: Mix data in the form of a sequence of Uint32.
   :param data: The data (sequence of Uint32) to be hashed into the mix.

   :returns: **modified_mix_integers** -- The result of performing the fnv hash on the mix and the passed in
             data.
   :rtype: `Tuple[Uint32, ...]`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 201-221

generate_dataset_item
~~~~~~~~~~~~~~~~~~~~~


.. function:: generate_dataset_item(cache: Tuple[Tuple[ethereum.base_types.Uint32, Ellipsis], Ellipsis], index: ethereum.base_types.Uint) -> ethereum.crypto.Hash64
   :noindexentry:

   Generate a particular dataset item 0-indexed by `index` using `cache`.
   Each dataset item is a byte stream of 64 bytes or a stream of 16 uint32
   numbers.

   :param cache: The cache from which a subset of items will be used to generate the
                 dataset item.
   :param index: The index of the dataset item to generate.

   :returns: **dataset_item** -- The cache generation seed for the passed in block.
   :rtype: `Hash32`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 225-262

generate_dataset
~~~~~~~~~~~~~~~~


.. function:: generate_dataset(block_number: ethereum.base_types.Uint) -> Tuple[ethereum.crypto.Hash64, Ellipsis]
   :noindexentry:

   Generate the full dataset for the block identified by `block_number`.

   This function is present only for demonstration purposes, as it will take
   a long time to execute.

   :param block_number: The number of the block of interest.

   :returns: **dataset** -- The dataset generated for the passed in block.
   :rtype: `Tuple[Hash64, ...]`




.. undocinclude:: /../src/ethereum/ethash.py
   :language: python
   :lines: 265-288
