:mod:`ethereum.frontier.vm.interpreter`
=======================================

.. py:module:: ethereum.frontier.vm.interpreter

Ethereum Virtual Machine (EVM) Interpreter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

A straightforward interpreter that executes EVM code.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.frontier.vm.interpreter.process_message_call
   ethereum.frontier.vm.interpreter.process_create_message
   ethereum.frontier.vm.interpreter.process_message
   ethereum.frontier.vm.interpreter.execute_code



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.frontier.vm.interpreter.PC_CHANGING_OPS
   ethereum.frontier.vm.interpreter.STACK_DEPTH_LIMIT


Module Details
---------------

PC_CHANGING_OPS
~~~~~~~~~~~~~~~

.. py:data:: PC_CHANGING_OPS
   

   


STACK_DEPTH_LIMIT
~~~~~~~~~~~~~~~~~

.. py:data:: STACK_DEPTH_LIMIT
   

   


process_message_call
~~~~~~~~~~~~~~~~~~~~


.. function:: process_message_call(message: ethereum.frontier.vm.Message, env: ethereum.frontier.vm.Environment) -> Tuple[ethereum.base_types.U256, ethereum.base_types.U256, Tuple[ethereum.frontier.eth_types.Log, Ellipsis], Set[ethereum.frontier.eth_types.Address]]
   :noindexentry:

   If `message.current` is empty then it creates a smart contract
   else it executes a call from the `message.caller` to the `message.target`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **output** -- The tuple `(gas_left, logs)`, where `gas_left` is the remaining gas
             after execution, and logs is the list of `eth1spec.eth_types.Log`
             generated during execution.
   :rtype: `Tuple[U256, List[eth1spec.eth_types.Log]]`




.. undocinclude:: /../src/ethereum/frontier/vm/interpreter.py
   :language: python
   :lines: 34-66

process_create_message
~~~~~~~~~~~~~~~~~~~~~~


.. function:: process_create_message(message: ethereum.frontier.vm.Message, env: ethereum.frontier.vm.Environment) -> ethereum.frontier.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects.
   :rtype: `ethereum.frontier.vm.Evm`




.. undocinclude:: /../src/ethereum/frontier/vm/interpreter.py
   :language: python
   :lines: 69-91

process_message
~~~~~~~~~~~~~~~


.. function:: process_message(message: ethereum.frontier.vm.Message, env: ethereum.frontier.vm.Environment) -> ethereum.frontier.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: `ethereum.frontier.vm.Evm`




.. undocinclude:: /../src/ethereum/frontier/vm/interpreter.py
   :language: python
   :lines: 94-119

execute_code
~~~~~~~~~~~~


.. function:: execute_code(message: ethereum.frontier.vm.Message, env: ethereum.frontier.vm.Environment) -> ethereum.frontier.vm.Evm
   :noindexentry:

   Executes bytecode present in the `message`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: `ethereum.vm.EVM`




.. undocinclude:: /../src/ethereum/frontier/vm/interpreter.py
   :language: python
   :lines: 122-168
