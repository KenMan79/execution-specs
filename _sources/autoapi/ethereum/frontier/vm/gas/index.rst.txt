:mod:`ethereum.frontier.vm.gas`
===============================

.. py:module:: ethereum.frontier.vm.gas

Ethereum Virtual Machine (EVM) Gas
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

EVM gas constants and calculators.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.frontier.vm.gas.subtract_gas
   ethereum.frontier.vm.gas.calculate_memory_gas_cost
   ethereum.frontier.vm.gas.calculate_gas_extend_memory



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.frontier.vm.gas.GAS_JUMPDEST
   ethereum.frontier.vm.gas.GAS_BASE
   ethereum.frontier.vm.gas.GAS_VERY_LOW
   ethereum.frontier.vm.gas.GAS_SLOAD
   ethereum.frontier.vm.gas.GAS_STORAGE_SET
   ethereum.frontier.vm.gas.GAS_STORAGE_UPDATE
   ethereum.frontier.vm.gas.GAS_STORAGE_CLEAR_REFUND
   ethereum.frontier.vm.gas.GAS_LOW
   ethereum.frontier.vm.gas.GAS_MID
   ethereum.frontier.vm.gas.GAS_HIGH
   ethereum.frontier.vm.gas.GAS_EXPONENTIATION
   ethereum.frontier.vm.gas.GAS_MEMORY
   ethereum.frontier.vm.gas.GAS_KECCAK256
   ethereum.frontier.vm.gas.GAS_KECCAK256_WORD
   ethereum.frontier.vm.gas.GAS_COPY
   ethereum.frontier.vm.gas.GAS_EXTERNAL
   ethereum.frontier.vm.gas.GAS_LOG
   ethereum.frontier.vm.gas.GAS_LOG_DATA
   ethereum.frontier.vm.gas.GAS_LOG_TOPIC
   ethereum.frontier.vm.gas.GAS_CREATE
   ethereum.frontier.vm.gas.GAS_CODE_DEPOSIT
   ethereum.frontier.vm.gas.GAS_ZERO


Module Details
---------------

GAS_JUMPDEST
~~~~~~~~~~~~

.. py:data:: GAS_JUMPDEST
   

   


GAS_BASE
~~~~~~~~

.. py:data:: GAS_BASE
   

   


GAS_VERY_LOW
~~~~~~~~~~~~

.. py:data:: GAS_VERY_LOW
   

   


GAS_SLOAD
~~~~~~~~~

.. py:data:: GAS_SLOAD
   

   


GAS_STORAGE_SET
~~~~~~~~~~~~~~~

.. py:data:: GAS_STORAGE_SET
   

   


GAS_STORAGE_UPDATE
~~~~~~~~~~~~~~~~~~

.. py:data:: GAS_STORAGE_UPDATE
   

   


GAS_STORAGE_CLEAR_REFUND
~~~~~~~~~~~~~~~~~~~~~~~~

.. py:data:: GAS_STORAGE_CLEAR_REFUND
   

   


GAS_LOW
~~~~~~~

.. py:data:: GAS_LOW
   

   


GAS_MID
~~~~~~~

.. py:data:: GAS_MID
   

   


GAS_HIGH
~~~~~~~~

.. py:data:: GAS_HIGH
   

   


GAS_EXPONENTIATION
~~~~~~~~~~~~~~~~~~

.. py:data:: GAS_EXPONENTIATION
   

   


GAS_MEMORY
~~~~~~~~~~

.. py:data:: GAS_MEMORY
   

   


GAS_KECCAK256
~~~~~~~~~~~~~

.. py:data:: GAS_KECCAK256
   

   


GAS_KECCAK256_WORD
~~~~~~~~~~~~~~~~~~

.. py:data:: GAS_KECCAK256_WORD
   

   


GAS_COPY
~~~~~~~~

.. py:data:: GAS_COPY
   

   


GAS_EXTERNAL
~~~~~~~~~~~~

.. py:data:: GAS_EXTERNAL
   

   


GAS_LOG
~~~~~~~

.. py:data:: GAS_LOG
   

   


GAS_LOG_DATA
~~~~~~~~~~~~

.. py:data:: GAS_LOG_DATA
   

   


GAS_LOG_TOPIC
~~~~~~~~~~~~~

.. py:data:: GAS_LOG_TOPIC
   

   


GAS_CREATE
~~~~~~~~~~

.. py:data:: GAS_CREATE
   

   


GAS_CODE_DEPOSIT
~~~~~~~~~~~~~~~~

.. py:data:: GAS_CODE_DEPOSIT
   

   


GAS_ZERO
~~~~~~~~

.. py:data:: GAS_ZERO
   

   


subtract_gas
~~~~~~~~~~~~


.. function:: subtract_gas(gas_left: ethereum.base_types.U256, amount: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Subtracts `amount` from `gas_left`.

   :param gas_left: The amount of gas left in the current frame.
   :param amount: The amount of gas the current operation requires.

   :raises OutOfGasError: If `gas_left` is less than `amount`.




.. undocinclude:: /../src/ethereum/frontier/vm/gas.py
   :language: python
   :lines: 43-62

calculate_memory_gas_cost
~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_memory_gas_cost(size_in_bytes: ethereum.base_types.Uint) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas cost for allocating memory
   to the smallest multiple of 32 bytes,
   such that the allocated size is at least as big as the given size.

   :param size_in_bytes: The size of the data in bytes.

   :returns: **total_gas_cost** -- The gas cost for storing data in memory.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/frontier/vm/gas.py
   :language: python
   :lines: 65-85

calculate_gas_extend_memory
~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_gas_extend_memory(memory: bytearray, start_position: ethereum.base_types.Uint, size: ethereum.base_types.U256) -> ethereum.base_types.U256
   :noindexentry:

   Calculates the gas amount to extend memory

   :param memory: Memory contents of the EVM.
   :param start_position: Starting pointer to the memory.
   :param size: Amount of bytes by which the memory needs to be extended.

   :returns: **to_be_paid** -- returns `0` if size=0 or if the
             size after extending memory is less than the size before extending
             else it returns the amount that needs to be paid for extendinng memory.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/frontier/vm/gas.py
   :language: python
   :lines: 88-120
