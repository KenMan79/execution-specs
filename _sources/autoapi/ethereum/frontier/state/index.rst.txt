:mod:`ethereum.frontier.state`
==============================

.. py:module:: ethereum.frontier.state

State
^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

The state contains all information that is preserved between transactions.

It consists of a main account trie and storage tries for each contract.

There is a distinction between an account that does not exist and
`EMPTY_ACCOUNT`.


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ethereum.frontier.state.State



Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.frontier.state.get_account
   ethereum.frontier.state.get_account_optional
   ethereum.frontier.state.set_account
   ethereum.frontier.state.destroy_account
   ethereum.frontier.state.get_storage
   ethereum.frontier.state.set_storage
   ethereum.frontier.state.storage_root
   ethereum.frontier.state.state_root
   ethereum.frontier.state.account_exists
   ethereum.frontier.state.modify_state
   ethereum.frontier.state.move_ether
   ethereum.frontier.state.set_account_balance
   ethereum.frontier.state.increment_nonce
   ethereum.frontier.state.set_code



Module Details
---------------

State
~~~~~


Contains all information that is preserved between transactions.


.. class:: State

   .. py:attribute:: _main_trie
      :annotation: :ethereum.frontier.trie.Trie[Optional[ethereum.frontier.eth_types.Account]]

      

   .. py:attribute:: _storage_tries
      :annotation: :Dict[ethereum.frontier.eth_types.Address, ethereum.frontier.trie.Trie[ethereum.base_types.U256]]

      



get_account
~~~~~~~~~~~


.. function:: get_account(state: State, address: ethereum.frontier.eth_types.Address) -> ethereum.frontier.eth_types.Account
   :noindexentry:

   Get the `Account` object at an address. Returns `EMPTY_ACCOUNT` if there
   is no account at the address.

   Use `get_account_optional()` if you care about the difference between a
   non-existent account and `EMPTY_ACCOUNT`.

   :param state: The state
   :type state: `State`
   :param address: Address to lookup.
   :type address: `Address`

   :returns: **account** -- Account at address.
   :rtype: `Account`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 40-64

get_account_optional
~~~~~~~~~~~~~~~~~~~~


.. function:: get_account_optional(state: State, address: ethereum.frontier.eth_types.Address) -> Optional[ethereum.frontier.eth_types.Account]
   :noindexentry:

   Get the `Account` object at an address. Returns `None` (rather than
   `EMPTY_ACCOUNT`) if there is no account at the address.

   :param state: The state
   :type state: `State`
   :param address: Address to lookup.
   :type address: `Address`

   :returns: **account** -- Account at address.
   :rtype: `Account`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 67-85

set_account
~~~~~~~~~~~


.. function:: set_account(state: State, address: ethereum.frontier.eth_types.Address, account: Optional[ethereum.frontier.eth_types.Account]) -> None
   :noindexentry:

   Set the `Account` object at an address. Setting to `None` deletes
   the account (but not its storage, see `destroy_account()`).

   :param state: The state
   :type state: `State`
   :param address: Address to set.
   :type address: `Address`
   :param account: Account to set at address.
   :type account: `Account`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 88-104

destroy_account
~~~~~~~~~~~~~~~


.. function:: destroy_account(state: State, address: ethereum.frontier.eth_types.Address) -> None
   :noindexentry:

   Completely remove the account at `address` and all of its storage.

   This function is made available exclusively for the `SELFDESTRUCT`
   opcode. It is expected that `SELFDESTRUCT` will be disabled in a future
   hardfork and this function will be removed.

   :param state: The state
   :type state: `State`
   :param address: Address of account to destroy.
   :type address: `Address`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 107-123

get_storage
~~~~~~~~~~~


.. function:: get_storage(state: State, address: ethereum.frontier.eth_types.Address, key: ethereum.base_types.Bytes) -> ethereum.base_types.U256
   :noindexentry:

   Get a value at a storage key on an account. Returns `U256(0)` if the
   storage key has not been set previously.

   :param state: The state
   :type state: `State`
   :param address: Address of the account.
   :type address: `Address`
   :param key: Key to lookup.
   :type key: `Bytes`

   :returns: **value** -- Value at the key.
   :rtype: `U256`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 126-152

set_storage
~~~~~~~~~~~


.. function:: set_storage(state: State, address: ethereum.frontier.eth_types.Address, key: ethereum.base_types.Bytes, value: ethereum.base_types.U256) -> None
   :noindexentry:

   Set a value at a storage key on an account. Setting to `U256(0)` deletes
   the key.

   :param state: The state
   :type state: `State`
   :param address: Address of the account.
   :type address: `Address`
   :param key: Key to set.
   :type key: `Bytes`
   :param value: Value to set at the key.
   :type value: `U256`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 155-180

storage_root
~~~~~~~~~~~~


.. function:: storage_root(state: State, address: ethereum.frontier.eth_types.Address) -> ethereum.base_types.Bytes
   :noindexentry:

   Calculate the storage root of an account.

   :param state: The state
   :type state: `State`
   :param address: Address of the account.
   :type address: `Address`

   :returns: **root** -- Storage root of the account.
   :rtype: `Bytes`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 183-202

state_root
~~~~~~~~~~


.. function:: state_root(state: State) -> ethereum.base_types.Bytes
   :noindexentry:

   Calculate the state root.

   :param state: The current state.
   :type state: `State`

   :returns: **root** -- The state root.
   :rtype: `Bytes`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 205-223

account_exists
~~~~~~~~~~~~~~


.. function:: account_exists(state: State, address: ethereum.frontier.eth_types.Address) -> bool
   :noindexentry:

   Checks if an account exists in the state trie

   :param state: The state
   :param address: Address of the account that needs to be checked.

   :returns: **account_exists** -- True if account exists in the state trie, False otherwise
   :rtype: `bool`




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 226-242

modify_state
~~~~~~~~~~~~


.. function:: modify_state(state: State, address: ethereum.frontier.eth_types.Address, f: Callable[[ethereum.frontier.eth_types.Account], None]) -> None
   :noindexentry:

   Modify an `Account` in the `State`.




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 245-251

move_ether
~~~~~~~~~~


.. function:: move_ether(state: State, sender_address: ethereum.frontier.eth_types.Address, recipient_address: ethereum.frontier.eth_types.Address, amount: ethereum.base_types.U256) -> None
   :noindexentry:

   Move funds between accounts.




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 254-272

set_account_balance
~~~~~~~~~~~~~~~~~~~


.. function:: set_account_balance(state: State, address: ethereum.frontier.eth_types.Address, amount: ethereum.base_types.U256) -> None
   :noindexentry:

   Sets the balance of an account.

   :param state: The current state.
   :param address: Address of the account whose nonce needs to be incremented.
   :param amount: The amount that needs to set in balance.




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 275-294

increment_nonce
~~~~~~~~~~~~~~~


.. function:: increment_nonce(state: State, address: ethereum.frontier.eth_types.Address) -> None
   :noindexentry:

   Increments the nonce of an account.

   :param state: The current state.
   :param address: Address of the account whose nonce needs to be incremented.




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 297-313

set_code
~~~~~~~~


.. function:: set_code(state: State, address: ethereum.frontier.eth_types.Address, code: ethereum.base_types.Bytes) -> None
   :noindexentry:

   Sets Account code.

   :param state: The current state.
   :param address: Address of the account whose code needs to be update.
   :param code: The bytecode that needs to be set.




.. undocinclude:: /../src/ethereum/frontier/state.py
   :language: python
   :lines: 316-335
