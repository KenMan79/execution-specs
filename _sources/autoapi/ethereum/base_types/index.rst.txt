:mod:`ethereum.base_types`
==========================

.. py:module:: ethereum.base_types

Numeric & Array Types
^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Integer and array types which are used by—but not unique to—Ethereum.


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ethereum.base_types.Uint
   ethereum.base_types.U256



Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.base_types._setattr_function
   ethereum.base_types._delattr_function
   ethereum.base_types._make_init_function
   ethereum.base_types.slotted_freezable
   ethereum.base_types.modify



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.base_types.U255_MAX_VALUE
   ethereum.base_types.U255_CEIL_VALUE
   ethereum.base_types.U256_MAX_VALUE
   ethereum.base_types.U256_CEIL_VALUE
   ethereum.base_types.U8_MAX_VALUE
   ethereum.base_types.MAX_VALUE
   ethereum.base_types.Bytes
   ethereum.base_types.Bytes0
   ethereum.base_types.Bytes8
   ethereum.base_types.Bytes20
   ethereum.base_types.Bytes32
   ethereum.base_types.Bytes64
   ethereum.base_types.Bytes256
   ethereum.base_types.T


Module Details
---------------

U255_MAX_VALUE
~~~~~~~~~~~~~~

.. py:data:: U255_MAX_VALUE
   

   


U255_CEIL_VALUE
~~~~~~~~~~~~~~~

.. py:data:: U255_CEIL_VALUE
   

   


U256_MAX_VALUE
~~~~~~~~~~~~~~

.. py:data:: U256_MAX_VALUE
   

   


U256_CEIL_VALUE
~~~~~~~~~~~~~~~

.. py:data:: U256_CEIL_VALUE
   

   


U8_MAX_VALUE
~~~~~~~~~~~~

.. py:data:: U8_MAX_VALUE
   

   


Uint
~~~~


Unsigned positive integer.


.. class:: Uint


   Bases: :py:obj:`int`

   .. py:attribute:: __slots__
      :annotation: = []

      

   .. py:method:: from_be_bytes(cls: Type, buffer: Bytes) -> Uint
      :classmethod:

      Converts a sequence of bytes into an arbitrarily sized unsigned integer
      from its big endian representation.
      :param buffer: Bytes to decode.

      :returns: **self** -- Unsigned integer decoded from `buffer`.
      :rtype: `Uint`


   .. py:method:: __radd__(self, left: int) -> Uint

      Return value+self.


   .. py:method:: __add__(self, right: int) -> Uint

      Return self+value.


   .. py:method:: __iadd__(self, right: int) -> Uint


   .. py:method:: __sub__(self, right: int) -> Uint

      Return self-value.


   .. py:method:: __rsub__(self, left: int) -> Uint

      Return value-self.


   .. py:method:: __isub__(self, right: int) -> Uint


   .. py:method:: __mul__(self, right: int) -> Uint

      Return self*value.


   .. py:method:: __rmul__(self, left: int) -> Uint

      Return value*self.


   .. py:method:: __imul__(self, right: int) -> Uint


   .. py:method:: __floordiv__(self, right: int) -> Uint

      Return self//value.


   .. py:method:: __rfloordiv__(self, left: int) -> Uint

      Return value//self.


   .. py:method:: __ifloordiv__(self, right: int) -> Uint


   .. py:method:: __mod__(self, right: int) -> Uint

      Return self%value.


   .. py:method:: __rmod__(self, left: int) -> Uint

      Return value%self.


   .. py:method:: __imod__(self, right: int) -> Uint


   .. py:method:: __divmod__(self, right: int) -> Tuple[Uint, Uint]

      Return divmod(self, value).


   .. py:method:: __rdivmod__(self, left: int) -> Tuple[Uint, Uint]

      Return divmod(value, self).


   .. py:method:: __pow__(self, right: int, modulo: Optional[int] = None) -> Uint

      Return pow(self, value, mod).


   .. py:method:: __rpow__(self, left: int, modulo: Optional[int] = None) -> Uint

      Return pow(value, self, mod).


   .. py:method:: __ipow__(self, right: int, modulo: Optional[int] = None) -> Uint


   .. py:method:: to_be_bytes32(self) -> Bytes32

      Converts this arbitrarily sized unsigned integer into its big endian
      representation with exactly 32 bytes.
      :returns: **big_endian** -- Big endian (most significant bits first) representation.
      :rtype: `Bytes32`


   .. py:method:: to_be_bytes(self) -> Bytes

      Converts this arbitrarily sized unsigned integer into its big endian
      representation.
      :returns: **big_endian** -- Big endian (most significant bits first) representation.
      :rtype: `Bytes`




U256
~~~~


Unsigned positive integer, which can represent `0` to `2 ** 256 - 1`,
inclusive.


.. class:: U256


   Bases: :py:obj:`int`

   .. py:attribute:: MAX_VALUE
      :annotation: :U256

      

   .. py:attribute:: __slots__
      :annotation: = []

      

   .. py:method:: from_be_bytes(cls: Type, buffer: Bytes) -> U256
      :classmethod:

      Converts a sequence of bytes into an arbitrarily sized unsigned integer
      from its big endian representation.
      :param buffer: Bytes to decode.

      :returns: **self** -- Unsigned integer decoded from `buffer`.
      :rtype: `U256`


   .. py:method:: from_signed(cls: Type, value: int) -> U256
      :classmethod:

      Converts a signed number into a 256-bit unsigned integer.
      :param value: Signed number

      :returns: **self** -- Unsigned integer obtained from `value`.
      :rtype: `U256`


   .. py:method:: __radd__(self, left: int) -> U256

      Return value+self.


   .. py:method:: __add__(self, right: int) -> U256

      Return self+value.


   .. py:method:: unchecked_add(self, right: int) -> int


   .. py:method:: wrapping_add(self, right: int) -> U256


   .. py:method:: __iadd__(self, right: int) -> U256


   .. py:method:: __sub__(self, right: int) -> U256

      Return self-value.


   .. py:method:: unchecked_sub(self, right: int) -> int


   .. py:method:: wrapping_sub(self, right: int) -> U256


   .. py:method:: __rsub__(self, left: int) -> U256

      Return value-self.


   .. py:method:: __isub__(self, right: int) -> U256


   .. py:method:: unchecked_mul(self, right: int) -> int


   .. py:method:: wrapping_mul(self, right: int) -> U256


   .. py:method:: __mul__(self, right: int) -> U256

      Return self*value.


   .. py:method:: __rmul__(self, left: int) -> U256

      Return value*self.


   .. py:method:: __imul__(self, right: int) -> U256


   .. py:method:: __floordiv__(self, right: int) -> U256

      Return self//value.


   .. py:method:: __rfloordiv__(self, left: int) -> U256

      Return value//self.


   .. py:method:: __ifloordiv__(self, right: int) -> U256


   .. py:method:: __mod__(self, right: int) -> U256

      Return self%value.


   .. py:method:: __rmod__(self, left: int) -> U256

      Return value%self.


   .. py:method:: __imod__(self, right: int) -> U256


   .. py:method:: __divmod__(self, right: int) -> Tuple[U256, U256]

      Return divmod(self, value).


   .. py:method:: __rdivmod__(self, left: int) -> Tuple[U256, U256]

      Return divmod(value, self).


   .. py:method:: unchecked_pow(self, right: int, modulo: Optional[int] = None) -> int


   .. py:method:: wrapping_pow(self, right: int, modulo: Optional[int] = None) -> U256


   .. py:method:: __pow__(self, right: int, modulo: Optional[int] = None) -> U256

      Return pow(self, value, mod).


   .. py:method:: __rpow__(self, left: int, modulo: Optional[int] = None) -> U256

      Return pow(value, self, mod).


   .. py:method:: __ipow__(self, right: int, modulo: Optional[int] = None) -> U256


   .. py:method:: __and__(self, right: int) -> U256

      Return self&value.


   .. py:method:: __or__(self, right: int) -> U256

      Return self|value.


   .. py:method:: __xor__(self, right: int) -> U256

      Return self^value.


   .. py:method:: __rxor__(self, left: int) -> U256

      Return value^self.


   .. py:method:: __ixor__(self, right: int) -> U256


   .. py:method:: __invert__(self) -> U256

      ~self


   .. py:method:: __rshift__(self, shift_by: int) -> U256

      Return self>>value.


   .. py:method:: to_be_bytes32(self) -> Bytes32

      Converts this 256-bit unsigned integer into its big endian
      representation with exactly 32 bytes.
      :returns: **big_endian** -- Big endian (most significant bits first) representation.
      :rtype: `Bytes32`


   .. py:method:: to_be_bytes(self) -> Bytes

      Converts this 256-bit unsigned integer into its big endian
      representation, omitting leading zero bytes.
      :returns: **big_endian** -- Big endian (most significant bits first) representation.
      :rtype: `Bytes`


   .. py:method:: to_signed(self) -> int

      Converts this 256-bit unsigned integer into a signed integer.
      :returns: **signed_int** -- Signed integer obtained from 256-bit unsigned integer.
      :rtype: `int`




MAX_VALUE
~~~~~~~~~

.. py:data:: MAX_VALUE
   

   


Bytes
~~~~~

.. py:data:: Bytes
   

   


Bytes0
~~~~~~

.. py:data:: Bytes0
   

   


Bytes8
~~~~~~

.. py:data:: Bytes8
   

   


Bytes20
~~~~~~~

.. py:data:: Bytes20
   

   


Bytes32
~~~~~~~

.. py:data:: Bytes32
   

   


Bytes64
~~~~~~~

.. py:data:: Bytes64
   

   


Bytes256
~~~~~~~~

.. py:data:: Bytes256
   

   


_setattr_function
~~~~~~~~~~~~~~~~~


.. function:: _setattr_function(self: Any, attr: str, value: Any) -> None
   :noindexentry:




.. undocinclude:: /../src/ethereum/base_types.py
   :language: python
   :lines: 644-648

_delattr_function
~~~~~~~~~~~~~~~~~


.. function:: _delattr_function(self: Any, attr: str) -> None
   :noindexentry:




.. undocinclude:: /../src/ethereum/base_types.py
   :language: python
   :lines: 651-655

_make_init_function
~~~~~~~~~~~~~~~~~~~


.. function:: _make_init_function(f: Callable) -> Callable
   :noindexentry:




.. undocinclude:: /../src/ethereum/base_types.py
   :language: python
   :lines: 658-665

slotted_freezable
~~~~~~~~~~~~~~~~~


.. function:: slotted_freezable(cls: Any) -> Any
   :noindexentry:

   Monkey patches a dataclass so it can be frozen by setting `_frozen` to
   `True` and uses `__slots__` for efficiency.

   Instances will be created frozen by default unless you pass `_frozen=False`
   to `__init__`.




.. undocinclude:: /../src/ethereum/base_types.py
   :language: python
   :lines: 668-680

T
~

.. py:data:: T
   

   


modify
~~~~~~


.. function:: modify(obj: T, f: Callable[[T], None]) -> T
   :noindexentry:

   Create a mutable copy of `obj` (which must be `@slotted_freezable`) and
   apply `f` to the copy before freezing it.

   :param obj: Object to copy.
   :type obj: `T`
   :param f: Function to apply to `obj`.
   :type f: `Callable[[T], None]`

   :returns: **new_obj** -- Compact byte array.
   :rtype: `T`




.. undocinclude:: /../src/ethereum/base_types.py
   :language: python
   :lines: 686-706
