:mod:`ethereum.utils`
=====================

.. py:module:: ethereum.utils

Utility Functions
^^^^^^^^^^^^^^^^^

..contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Utility functions used in this application.


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.utils.get_sign
   ethereum.utils.ceil32
   ethereum.utils.to_address
   ethereum.utils.has_hex_prefix
   ethereum.utils.remove_hex_prefix
   ethereum.utils.hex_to_bytes
   ethereum.utils.hex_to_bytes8
   ethereum.utils.hex_to_bytes32
   ethereum.utils.hex_to_hash
   ethereum.utils.hex_to_root
   ethereum.utils.hex_to_bloom
   ethereum.utils.hex_to_address
   ethereum.utils.hex_to_uint
   ethereum.utils.hex_to_u256
   ethereum.utils.rlp_hash
   ethereum.utils.json_to_header
   ethereum.utils.json_to_transactions
   ethereum.utils.json_to_block



Module Details
---------------

get_sign
~~~~~~~~


.. function:: get_sign(value: int) -> int
   :noindexentry:

   Determines the sign of a number.

   :param value: The value whose sign is to be determined.

   :returns: **sign** -- The sign of the number (-1 or 0 or 1).
             The return value is based on math signum function.
   :rtype: `int`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 34-54

ceil32
~~~~~~


.. function:: ceil32(value: ethereum.base_types.Uint) -> ethereum.base_types.Uint
   :noindexentry:

   Converts a unsigned integer to the next closest multiple of 32.

   :param value: The value whose ceil32 is to be calculated.

   :returns: **ceil32** -- The same value if it's a perfect multiple of 32
             else it returns the smallest multiple of 32
             that is greater than `value`.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 57-78

to_address
~~~~~~~~~~


.. function:: to_address(data: Union[ethereum.base_types.Uint, ethereum.frontier.eth_types.U256]) -> ethereum.frontier.eth_types.Address
   :noindexentry:

   Convert a Uint or U256 value to a valid address (20 bytes).

   :param data: The string to be converted to bytes.

   :returns: **address** -- The obtained address.
   :rtype: `Address`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 81-95

has_hex_prefix
~~~~~~~~~~~~~~


.. function:: has_hex_prefix(hex_string: str) -> bool
   :noindexentry:

   Check if a hex string starts with hex prefix (0x).

   :param hex_string: The hexadecimal string to be checked for presence of prefix.

   :returns: **has_prefix** -- Boolean indicating whether the hex string has 0x prefix.
   :rtype: `bool`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 98-112

remove_hex_prefix
~~~~~~~~~~~~~~~~~


.. function:: remove_hex_prefix(hex_string: str) -> str
   :noindexentry:

   Remove 0x prefix from a hex string if present. This function returns the
   passed hex string if it isn't prefixed with 0x.

   :param hex_string: The hexadecimal string whose prefix is to be removed.

   :returns: **modified_hex_string** -- The hexadecimal string with the 0x prefix removed if present.
   :rtype: `str`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 115-133

hex_to_bytes
~~~~~~~~~~~~


.. function:: hex_to_bytes(hex_string: str) -> ethereum.frontier.eth_types.Bytes
   :noindexentry:

   Convert hex string to bytes.

   :param hex_string: The hexadecimal string to be converted to bytes.

   :returns: **byte_stream** -- Byte stream corresponding to the given hexadecimal string.
   :rtype: `bytes`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 136-150

hex_to_bytes8
~~~~~~~~~~~~~


.. function:: hex_to_bytes8(hex_string: str) -> ethereum.frontier.eth_types.Bytes8
   :noindexentry:

   Convert hex string to 8 bytes.

   :param hex_string: The hexadecimal string to be converted to 8 bytes.

   :returns: **8_byte_stream** -- 8-byte stream corresponding to the given hexadecimal string.
   :rtype: `bytes`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 153-167

hex_to_bytes32
~~~~~~~~~~~~~~


.. function:: hex_to_bytes32(hex_string: str) -> ethereum.frontier.eth_types.Bytes32
   :noindexentry:

   Convert hex string to 32 bytes.

   :param hex_string: The hexadecimal string to be converted to 32 bytes.

   :returns: **32_byte_stream** -- 32-byte stream corresponding to the given hexadecimal string.
   :rtype: `bytes`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 170-184

hex_to_hash
~~~~~~~~~~~


.. function:: hex_to_hash(hex_string: str) -> ethereum.frontier.eth_types.Hash32
   :noindexentry:

   Convert hex string to hash32 (32 bytes).

   :param hex_string: The hexadecimal string to be converted to hash32.

   :returns: **hash** -- 32-byte stream obtained from the given hexadecimal string.
   :rtype: `Hash32`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 187-201

hex_to_root
~~~~~~~~~~~


.. function:: hex_to_root(hex_string: str) -> ethereum.frontier.eth_types.Root
   :noindexentry:

   Convert hex string to trie root.

   :param hex_string: The hexadecimal string to be converted to trie root.

   :returns: **root** -- Trie root obtained from the given hexadecimal string.
   :rtype: `Root`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 204-218

hex_to_bloom
~~~~~~~~~~~~


.. function:: hex_to_bloom(hex_string: str) -> ethereum.frontier.eth_types.Bloom
   :noindexentry:

   Convert hex string to bloom.

   :param hex_string: The hexadecimal string to be converted to bloom.

   :returns: **bloom** -- Bloom obtained from the given hexadecimal string.
   :rtype: `Bloom`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 221-235

hex_to_address
~~~~~~~~~~~~~~


.. function:: hex_to_address(hex_string: str) -> ethereum.frontier.eth_types.Address
   :noindexentry:

   Convert hex string to Address (20 bytes).

   :param hex_string: The hexadecimal string to be converted to Address.

   :returns: **address** -- The address obtained from the given hexadecimal string.
   :rtype: `Address`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 238-252

hex_to_uint
~~~~~~~~~~~


.. function:: hex_to_uint(hex_string: str) -> ethereum.base_types.Uint
   :noindexentry:

   Convert hex string to Uint.

   :param hex_string: The hexadecimal string to be converted to Uint.

   :returns: **converted** -- The unsigned integer obtained from the given hexadecimal string.
   :rtype: `Uint`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 255-269

hex_to_u256
~~~~~~~~~~~


.. function:: hex_to_u256(hex_string: str) -> ethereum.frontier.eth_types.U256
   :noindexentry:

   Convert hex string to U256.

   :param hex_string: The hexadecimal string to be converted to U256.

   :returns: **converted** -- The U256 integer obtained from the given hexadecimal string.
   :rtype: `U256`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 272-286

rlp_hash
~~~~~~~~


.. function:: rlp_hash(data: ethereum.frontier.rlp.RLP) -> ethereum.frontier.eth_types.Hash32
   :noindexentry:

   Obtain the keccak-256 hash of the rlp encoding of the passed in data.

   :param data: The data for which we need the rlp hash.

   :returns: **hash** -- The rlp hash of the passed in data.
   :rtype: `Hash32`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 289-303

json_to_header
~~~~~~~~~~~~~~


.. function:: json_to_header(json_data: Dict[Any, Any]) -> ethereum.frontier.eth_types.Header
   :noindexentry:

   Convert json data to block header.

   :param json_data: The header data where the values are hexadecimals.

   :returns: **header** -- The header object obtained from the json data.
   :rtype: `Header`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 306-335

json_to_transactions
~~~~~~~~~~~~~~~~~~~~


.. function:: json_to_transactions(json_data: Dict[Any, Any]) -> Tuple[ethereum.frontier.eth_types.Transaction, Ellipsis]
   :noindexentry:

   Convert json data to tuple of transaction objects.

   :param json_data: The transactions data where the values are hexadecimals.

   :returns: **transactions** -- The transaction objects obtained from the json data.
   :rtype: `Tuple[Transaction, ...]`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 339-372

json_to_block
~~~~~~~~~~~~~


.. function:: json_to_block(block_json_data: Dict[Any, Any], ommers: Tuple[ethereum.frontier.eth_types.Header, Ellipsis]) -> ethereum.frontier.eth_types.Block
   :noindexentry:

   Convert json data to a block object with the help of ommer objects.

   :param block_json_data: The block json data where the values are hexadecimals, which is used
                           to derive the header and the transactions.
   :param ommers: The ommer headers required to form the current block object.

   :returns: **header** -- The header object obtained from the json data.
   :rtype: `Header`




.. undocinclude:: /../src/ethereum/utils.py
   :language: python
   :lines: 375-400
